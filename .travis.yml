---
# We need the systemd for the kubeadm and it's default from 16.04+
dist: xenial
language: minimal

stages:
  - name: lint
    if: type IN (push, pull_request)
  - name: deploy
    if: type IN (push, pull_request)
  - name: publish
    if: type = push AND branch = master

jobs:
  include:
    - stage: lint
      env:
        - REPO_DIR=/home/travis/build/NBISweden/LocalEGA-helm
      install:
        # Installing Helm
        - curl https://raw.githubusercontent.com/kubernetes/helm/v2.12.2/scripts/get > get_helm.sh && chmod 700 get_helm.sh && ./get_helm.sh
        - helm init --client-only
      script:
        # Check ega-charts format
        - >
          for dir in `ls ${REPO_DIR}/ega-charts`; do
            helm lint ${REPO_DIR}/ega-charts/$dir
            if [ $? != 0 ]; then
              travis_terminate 1
            fi
          done

    - stage: deploy
      sudo: required
      before_script:
         # Decrypt config
        - openssl aes-256-cbc -K $encrypted_key -iv $encrypted_iv -in .ssh-keys/staging.enc -out .ssh-keys/kube-config -d -md md5
        - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.13.0/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        - export KUBECONFIG=.ssh-keys/kube-config
        # Download helm
        - curl https://raw.githubusercontent.com/kubernetes/helm/v2.13.0/scripts/get > get_helm.sh && chmod 700 get_helm.sh && ./get_helm.sh
        - helm init -c
        - mkdir -p ega-charts/localega/config
        # decrypt files
        - openssl aes-256-cbc -K $encrypted_key -iv $encrypted_iv -in .ssh-keys/dummy.enc -out ega-charts/localega/config/dummy.sec -d -md md5
        - openssl aes-256-cbc -K $encrypted_key -iv $encrypted_iv -in .ssh-keys/key.1.enc -out ega-charts/localega/config/key.1.sec -d -md md5
        - openssl aes-256-cbc -K $encrypted_key -iv $encrypted_iv -in .ssh-keys/pub.enc -out ega-charts/localega/config/key.1.pub -d -md md5
        - openssl aes-256-cbc -K $encrypted_key -iv $encrypted_iv -in .ssh-keys/ssl.enc -out ega-charts/localega/config/ssl.key -d -md md5
        - openssl aes-256-cbc -K $encrypted_key -iv $encrypted_iv -in .ssh-keys/cert.enc -out ega-charts/localega/config/ssl.cert -d -md md5
        - echo "JSUgLSotIG1vZGU6IGVybGFuZyAtKi0KJSUKW3tyYWJiaXQsW3tsb29wYmFja191c2VycywgWyBdIH0sIHt0Y3BfbGlzdGVuZXJzLCBbIDU2NzIgXSB9LCB7c3NsX2xpc3RlbmVycywgWyBdIH0sCiAgICAgICAge2hpcGVfY29tcGlsZSwgZmFsc2UgfSwge2RlZmF1bHRfdmhvc3QsICIvIn0sIHtkZWZhdWx0X3VzZXIsICAiZ3Vlc3QifSwKICAgICAgICB7ZGVmYXVsdF9wYXNzLCAgImd1ZXN0In0sIHtkZWZhdWx0X3Blcm1pc3Npb25zLCBbIi4qIiwgIi4qIiwiLioiXX0sCiAgICAgICAge2RlZmF1bHRfdXNlcl90YWdzLCBbYWRtaW5pc3RyYXRvcl19LCB7ZGlza19mcmVlX2xpbWl0LCAiMUdCIn1dfSwKICAgICAgICB7cmFiYml0bXFfbWFuYWdlbWVudCwgWyB7IGxpc3RlbmVyLCBbIHsgcG9ydCwgMTU2NzIgfSwgeyBzc2wsIGZhbHNlIH1dIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgbG9hZF9kZWZpbml0aW9ucywgIi9ldGMvcmFiYml0bXEvZGVmcy5qc29uIn0gXX0KXS4=" | base64 -d > ega-charts/localega/config/rabbitmq.config
        - echo "eyJyYWJiaXRfdmVyc2lvbiI6IjMuNi4xNiIsCiAgICAgInVzZXJzIjpbeyJuYW1lIjoiZ3Vlc3QiLCJwYXNzd29yZF9oYXNoIjoiSnpUdUp2SzA3VmlNMkhpODlETFMyTEw2dUVWVGNIdGtVQmszV0VDR2w2YmxpSERwIiwiaGFzaGluZ19hbGdvcml0aG0iOiJyYWJiaXRfcGFzc3dvcmRfaGFzaGluZ19zaGEyNTYiLCJ0YWdzIjoiYWRtaW5pc3RyYXRvciJ9XSwKCiAgICAgInZob3N0cyI6W3sibmFtZSI6Ii8ifV0sCiAgICAgInBlcm1pc3Npb25zIjpbeyJ1c2VyIjoiZ3Vlc3QiLCJ2aG9zdCI6Ii8iLCJjb25maWd1cmUiOiIuKiIsIndyaXRlIjoiLioiLCJyZWFkIjoiLioifV0sCiAicGFyYW1ldGVycyI6W10sCiAgICAgImdsb2JhbF9wYXJhbWV0ZXJzIjpbeyJuYW1lIjoiY2x1c3Rlcl9uYW1lIiwidmFsdWUiOiJyYWJiaXRAbG9jYWxob3N0In1dLAogInBvbGljaWVzIjpbXSwKICAgICAicXVldWVzIjpbeyJuYW1lIjoiZmlsZXMiLCJ2aG9zdCI6Ii8iLCJkdXJhYmxlIjp0cnVlLCJhdXRvX2RlbGV0ZSI6ZmFsc2UsImFyZ3VtZW50cyI6e319LAogeyJuYW1lIjoiYXJjaGl2ZWQiLCJ2aG9zdCI6Ii8iLCJkdXJhYmxlIjp0cnVlLCJhdXRvX2RlbGV0ZSI6ZmFsc2UsImFyZ3VtZW50cyI6e319LAogeyJuYW1lIjoic3RhYmxlSURzIiwidmhvc3QiOiIvIiwiZHVyYWJsZSI6dHJ1ZSwiYXV0b19kZWxldGUiOmZhbHNlLCJhcmd1bWVudHMiOnt9fV0sCiJleGNoYW5nZXMiOlt7Im5hbWUiOiJsZWdhIiwidmhvc3QiOiIvIiwidHlwZSI6InRvcGljIiwiZHVyYWJsZSI6dHJ1ZSwiYXV0b19kZWxldGUiOmZhbHNlLCJpbnRlcm5hbCI6ZmFsc2UsImFyZ3VtZW50cyI6e319LAogICAgICAgICAgICAgIHsibmFtZSI6ImNlZ2EiLCJ2aG9zdCI6Ii8iLCJ0eXBlIjoidG9waWMiLCJkdXJhYmxlIjp0cnVlLCJhdXRvX2RlbGV0ZSI6ZmFsc2UsImludGVybmFsIjpmYWxzZSwiYXJndW1lbnRzIjp7fX1dLAogImJpbmRpbmdzIjpbeyJzb3VyY2UiOiJsZWdhIiwgInZob3N0IjoiLyIsICJkZXN0aW5hdGlvbiI6ImFyY2hpdmVkIiwgICJkZXN0aW5hdGlvbl90eXBlIjoicXVldWUiLCAicm91dGluZ19rZXkiOiJhcmNoaXZlZCIsICJhcmd1bWVudHMiOnt9fV0KfQ==" | base64 -d > ega-charts/localega/config/defs.json
      script:
        - set +e
        - kubectl cluster-info
        # Install minio
        - helm repo update
        - helm install --namespace travis-$TRAVIS_BUILD_NUMBER --name travis-minio-$TRAVIS_BUILD_NUMBER --set accessKey=$MINIO_ACCESS,secretKey=$MINIO_SECRET,service.port=80,minioConfig.region=lega stable/minio --wait --timeout 300
        # Install fake CEGA
        - helm install --name travis-cega-$TRAVIS_BUILD_NUMBER --namespace travis-$TRAVIS_BUILD_NUMBER ega-charts/cega/ --set secrets.cega_creds=$CEGA_CREDS,persistence.enabled=false --wait --timeout 300
        # install LocalEGA
        - helm install --name travis-lega-$TRAVIS_BUILD_NUMBER --namespace travis-$TRAVIS_BUILD_NUMBER ega-charts/localega --set config.broker_username="$MQUSER",config.cega_users_host="http://cega-users",config.cega_mq_host="cega-mq",config.cega_username="lega",config.cega_vhost="lega",config.data_storage_url="http://travis-minio-$TRAVIS_BUILD_NUMBER",config.postgres_user="lega",secrets.cega_creds="$CEGA_CREDS",secrets.cega_mq_pass="$CEGA_MQ_PASS",secrets.pgp_passphrase="$PGP_PASSWORD",secrets.shared_password="$SHARED_PASSWORD",secrets.mq_password="$MQ_PASSWORD",secrets.postgres_password="$POSTGRES_PASSWORD",secrets.s3_access_key="$MINIO_ACCESS",secrets.s3_secret_key="$MINIO_SECRET",ingest.coLocateInbox=true,persistence.enabled=false
        - until kubectl -n travis-$TRAVIS_BUILD_NUMBER get pods -lrole=database -o jsonpath='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status}' | grep "Ready=True"; do echo "waiting for database to become ready"; sleep 10; done
        - until kubectl -n travis-$TRAVIS_BUILD_NUMBER get pods -lrole=filedatabase -o jsonpath='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status}' | grep "Ready=True"; do echo "waiting for filedatabase to become ready"; sleep 10; done
        # Run e2e test
        - helm upgrade travis-lega-$TRAVIS_BUILD_NUMBER ega-charts/localega --set config.broker_username="$MQUSER",config.cega_users_host="http://cega-users",config.cega_mq_host="cega-mq",config.cega_username="lega",config.cega_vhost="lega",config.data_storage_url="http://travis-minio-$TRAVIS_BUILD_NUMBER",config.postgres_user="lega",secrets.cega_creds="$CEGA_CREDS",secrets.cega_mq_pass="$CEGA_MQ_PASS",secrets.pgp_passphrase="$PGP_PASSWORD",secrets.shared_pgp_password="$SHARED_PASSWORD",secrets.mq_password="$MQ_PASSWORD",secrets.postgres_password="$POSTGRES_PASSWORD",secrets.s3_access_key="$MINIO_ACCESS",secrets.s3_secret_key="$MINIO_SECRET",ingest.coLocateInbox=true,persistence.enabled=false,tester.run=true,tester.token="$TEST_TOKEN",tester.imagePullPolicy=Always
        - until kubectl -n travis-$TRAVIS_BUILD_NUMBER get jobs localega-e2e-tester -o jsonpath='{.status.conditions[?(@.type=="Complete")].status}' | grep "True"; do echo "Waiting for e2e test to complete"; sleep 30; done
        # Upgrade helm deployment to use mina-inbox
        - helm upgrade travis-lega-$TRAVIS_BUILD_NUMBER ega-charts/localega --set inbox.repository="nbisweden/ega-mina-inbox",inbox.imageTag="latest",config.broker_username="$MQUSER",config.cega_users_host="http://cega-users",config.cega_mq_host="cega-mq",config.cega_username="lega",config.cega_vhost="lega",config.data_storage_url="http://travis-minio-$TRAVIS_BUILD_NUMBER",config.postgres_user="lega",secrets.cega_creds="$CEGA_CREDS",secrets.cega_mq_pass="$CEGA_MQ_PASS",secrets.pgp_passphrase="$PGP_PASSWORD",secrets.shared_pgp_password="$SHARED_PASSWORD",secrets.mq_password="$MQ_PASSWORD",secrets.postgres_password="$POSTGRES_PASSWORD",secrets.s3_access_key="$MINIO_ACCESS",secrets.s3_secret_key="$MINIO_SECRET",ingest.coLocateInbox=true,persistence.enabled=false
        - until kubectl -n travis-$TRAVIS_BUILD_NUMBER get pods -ltype=mina-inbox -o jsonpath='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status}' | grep "Ready=True"; do echo "waiting for inbox to become ready"; sleep 10; done
        - sleep 60
        # Run e2e test
        - helm upgrade travis-lega-$TRAVIS_BUILD_NUMBER ega-charts/localega --set inbox.repository="nbisweden/ega-mina-inbox",inbox.imageTag="latest",config.broker_username="$MQUSER",config.cega_users_host="http://cega-users",config.cega_mq_host="cega-mq",config.cega_username="lega",config.cega_vhost="lega",config.data_storage_url="http://travis-minio-$TRAVIS_BUILD_NUMBER",config.postgres_user="lega",secrets.cega_creds="$CEGA_CREDS",secrets.cega_mq_pass="$CEGA_MQ_PASS",secrets.pgp_passphrase="$PGP_PASSWORD",secrets.shared_pgp_password="$SHARED_PASSWORD",secrets.mq_password="$MQ_PASSWORD",secrets.postgres_password="$POSTGRES_PASSWORD",secrets.s3_access_key="$MINIO_ACCESS",secrets.s3_secret_key="$MINIO_SECRET",ingest.coLocateInbox=true,persistence.enabled=false,tester.run=true,tester.token="$TEST_TOKEN",tester.imagePullPolicy=Always
        - until kubectl -n travis-$TRAVIS_BUILD_NUMBER get jobs localega-e2e-tester -o jsonpath='{.status.conditions[?(@.type=="Complete")].status}' | grep "True"; do echo "Waiting for e2e test to complete"; sleep 30; done
        # cleanup after completion
        - helm delete --purge travis-cega-$TRAVIS_BUILD_NUMBER travis-lega-$TRAVIS_BUILD_NUMBER travis-minio-$TRAVIS_BUILD_NUMBER
        - kubectl delete ns travis-$TRAVIS_BUILD_NUMBER
      after_failure:
      # make sure we clean up the kubernetes environment if things should fail.
        - helm delete --purge travis-cega-$TRAVIS_BUILD_NUMBER travis-lega-$TRAVIS_BUILD_NUMBER travis-minio-$TRAVIS_BUILD_NUMBER
        - kubectl delete ns travis-$TRAVIS_BUILD_NUMBER
    - stage: publish
      env:
        - TARGET_BR=gh-pages
        - REPO_DIR=/home/travis/build/NBISweden/LocalEGA-helm
        - GH_URL=https://nbisweden.github.io/LocalEGA-helm/
      install:
        # Installing Helm
        - curl https://raw.githubusercontent.com/kubernetes/helm/v2.12.2/scripts/get > get_helm.sh && chmod 700 get_helm.sh && ./get_helm.sh
        - helm init --client-only
      before_script:
        # Decrypt key
        - >
          openssl aes-256-cbc
          -K $encrypted_key
          -iv $encrypted_iv
          -in .ssh-keys/travis.enc
          -out .ssh-keys/travis
          -d
        # Add the keypair to the agent
        - chmod 600 .ssh-keys/travis
        - eval "$(ssh-agent -s)"
        - ssh-add .ssh-keys/travis
      script:
        # Temporary dir for storing new packaged ega-charts and index files
        - BUILD_DIR=$(mktemp -d)

        # Useful URLs
        - REPO_URL=`git config remote.origin.url`
        - SSH_REPO=${REPO_URL/https:\/\/github.com\//git@github.com:}
        - SHA=`git rev-parse --verify HEAD`

        # Push temporary directory to the stack
        - pushd $BUILD_DIR

        # Iterate over all ega-charts and package them
        - >
          for dir in `ls ${REPO_DIR}/ega-charts`; do
            helm dep update ${REPO_DIR}/ega-charts/$dir
            helm package ${REPO_DIR}/ega-charts/$dir
          done

        # Indexing of ega-charts
        - >
          if [ -f index.yaml ]; then
            helm repo index --url ${GH_URL} --merge index.yaml .
          else
            helm repo index --url ${GH_URL} .
          fi

        # Pop temporary directory from the stack
        - popd

        # List all the contents that we will push
        - ls ${BUILD_DIR}

        # Clone repository and empty target branch
        - git clone ${REPO_URL} out
        - cd out
        - git checkout ${TARGET_BR} || git checkout --orphan ${TARGET_BR}
        - cd ..

        # Copying contents of BUILD_DIR to out folder
        - cp $BUILD_DIR/* out/
        - cd out
        # Add all new files to staging phase and commit the changes
        - git config user.name "Travis CI"
        - git config user.email "travis@travis-ci.org"
        - git add -A .
        - git status
        - git commit -m "Travis deploy ${SHA}"
        # We can push.
        - git push ${SSH_REPO}
